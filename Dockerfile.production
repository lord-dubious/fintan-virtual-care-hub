# Multi-stage Docker build for production
# Fintan Virtual Care Hub

# Stage 1: Build frontend
FROM node:18-alpine AS frontend-builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig*.json ./
COPY vite.config.ts ./

# Install dependencies
RUN npm ci --only=production

# Copy frontend source
COPY src/ ./src/
COPY public/ ./public/
COPY index.html ./

# Build frontend
RUN npm run build

# Stage 2: Build backend
FROM node:18-alpine AS backend-builder

WORKDIR /app

# Copy backend package files
COPY backend/package*.json ./backend/
COPY backend/tsconfig.json ./backend/

# Install backend dependencies
WORKDIR /app/backend
RUN npm ci --only=production

# Copy backend source
COPY backend/src/ ./src/
COPY backend/prisma/ ./prisma/

# Generate Prisma client
RUN npx prisma generate

# Build backend
RUN npm run build

# Stage 3: Production runtime
FROM node:18-alpine AS production

# Install system dependencies
RUN apk add --no-cache \
    dumb-init \
    curl \
    postgresql-client \
    && rm -rf /var/cache/apk/*

# Create app user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S fintan -u 1001

# Set working directory
WORKDIR /app

# Copy built frontend
COPY --from=frontend-builder --chown=fintan:nodejs /app/dist ./frontend/dist

# Copy built backend
COPY --from=backend-builder --chown=fintan:nodejs /app/backend/dist ./backend/dist
COPY --from=backend-builder --chown=fintan:nodejs /app/backend/node_modules ./backend/node_modules
COPY --from=backend-builder --chown=fintan:nodejs /app/backend/prisma ./backend/prisma
COPY --from=backend-builder --chown=fintan:nodejs /app/backend/package*.json ./backend/

# Copy production configuration
COPY --chown=fintan:nodejs .env.production ./.env
COPY --chown=fintan:nodejs docker-entrypoint.sh ./

# Create necessary directories
RUN mkdir -p /var/log/fintan /var/uploads/fintan && \
    chown -R fintan:nodejs /var/log/fintan /var/uploads/fintan

# Make entrypoint executable
RUN chmod +x docker-entrypoint.sh

# Switch to non-root user
USER fintan

# Expose ports
EXPOSE 3000 10000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:10000/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["./docker-entrypoint.sh"]
