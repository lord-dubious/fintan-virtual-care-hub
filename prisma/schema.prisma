// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Base user model for authentication and shared properties
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?   // Hashed password
  name          String?
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          UserRole  @default(PATIENT)

  // Relations
  patient       Patient?
  provider      Provider?
  appointments  Appointment[] // Appointments created by this user
}

enum UserRole {
  PATIENT
  PROVIDER
  ADMIN
}

// Patient-specific information
model Patient {
  id            String    @id @default(cuid())
  userId        String    @unique
  dateOfBirth   DateTime?
  address       String?
  emergencyContact String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments  Appointment[]
  medicalRecords MedicalRecord[]
}

// Healthcare provider information
model Provider {
  id            String    @id @default(cuid())
  userId        String    @unique
  title         String?   // Dr., Prof., etc.
  specialization String?
  bio           String?
  licenseNumber String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments  Appointment[]
  availability  Availability[]
}

// Provider availability for scheduling
model Availability {
  id          String    @id @default(cuid())
  providerId  String
  dayOfWeek   Int       // 0-6 for Sunday-Saturday
  startTime   String    // Format: "HH:MM" in 24-hour format
  endTime     String    // Format: "HH:MM" in 24-hour format
  isAvailable Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  provider    Provider  @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@unique([providerId, dayOfWeek, startTime, endTime])
}

// Appointment model for scheduling consultations
model Appointment {
  id              String    @id @default(cuid())
  patientId       String
  providerId      String?
  createdById     String    // User who created the appointment
  consultationType ConsultationType
  appointmentDate DateTime
  reason          String?
  status          AppointmentStatus @default(SCHEDULED)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  patient         Patient   @relation(fields: [patientId], references: [id])
  provider        Provider? @relation(fields: [providerId], references: [id])
  createdBy       User      @relation(fields: [createdById], references: [id])
  consultation    Consultation?
  payment         Payment?
}

enum ConsultationType {
  VIDEO
  AUDIO
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

// Consultation model for video/audio calls
model Consultation {
  id              String    @id @default(cuid())
  appointmentId   String    @unique
  sessionId       String?   // Daily.co session ID
  roomUrl         String?   // Daily.co room URL
  startTime       DateTime?
  endTime         DateTime?
  status          ConsultationStatus @default(SCHEDULED)
  notes           String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  appointment     Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  prescriptions   Prescription[]
}

enum ConsultationStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Payment model for tracking payments
model Payment {
  id              String    @id @default(cuid())
  appointmentId   String    @unique
  amount          Float
  currency        String    @default("USD")
  paymentMethod   PaymentMethod
  transactionId   String?   // External payment processor transaction ID
  status          PaymentStatus @default(PENDING)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  appointment     Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

enum PaymentMethod {
  STRIPE
  PAYSTACK
  CREDIT_CARD
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Medical record for patient history
model MedicalRecord {
  id              String    @id @default(cuid())
  patientId       String
  title           String
  description     String    @db.Text
  recordType      String?   // Type of record (e.g., "Allergy", "Condition", "Medication")
  recordDate      DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  patient         Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

// Prescription model for medications prescribed during consultations
model Prescription {
  id              String    @id @default(cuid())
  consultationId  String
  medication      String
  dosage          String
  frequency       String
  duration        String
  instructions    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  consultation    Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
}

